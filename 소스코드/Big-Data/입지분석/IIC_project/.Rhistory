iris$Species
unique(iris$Species)
summary(unique(iris$Species))
summary(iris$Species)
# 정규표현식의 기능과 작성방법 점검
# gsub() : 대체하는 함수
word <- "JAVA javascript 가나다 123 %^&*"
gsub("[^가-힣]", "", word)
# 정규표현식의 기능과 작성방법 점검
# gsub() : 대체하는 함수
word <- "JAVA javascript 가나다 123 %^&*"
gsub("[^가-힣]", "", word)
gsub("[&^%*]", "", word)
gsub("[가-힣]", "", word)
gsub("[가-힣]", "", word)
gsub("[^가-힣]", "", word)
gsub("[&^%*]", "", word)
gsub("[1234567890]", "", word)
gsub("[0-9]", "", word)
gsub("\\d", "", word)
gsub("[^1234567890]", "", word)
gsub("\\D", "", word)
gsub("[[:punct:]]", "", word)
# 정규표현식의 기능과 작성방법 점검
# gsub() : 대체하는 함수
word <- "JAVA javascript 가나다 123 %^&*"
gsub("[[:alnum:]]", "", word)
gsub("[^[:alnum:]]", "", word)
gsub("[[:space:]]", "", word)
gsub("[[:space:][:punct:]]", "", word)
gsub("[^[:space:][:punct:]]", "", word)
word <- "JAVA javascript Aa 가나다 AAaAaA123 %^&*"
gsub(" ", "@", word)
word <- "JAVA javascript Aa 가나다 AAaAaA123 %^&*"
gsub("[Aa]", "", word)
x <- "We have a dream"
nchar(x)
length(x)
letters
sort(letters, decreasing=TRUE)
fox.says <- "It is only with the HEART that one can See Rightly"
tolower(fox.says)
toupper(fox.says)
substr("Data Analytics", start=1, stop=4)
substr("Data Analytics", start=1, stop=1)
substr("Data Analytics", 3, 3)
!substr
!substr
help(substr)
substr("Data Analytics", 6, 14)
# substr("Data Analytics", start=2)
substr("Data Analytics", start=c(1,6), stop=c(4, 14)) #첫번째만 호출된다!
substring("Data Analytics", first=c(1,6), last=c(4, 14))
substring("abcdef", 1:6, 1:6)
substring("Data Analytics", first=6)
substr("Data Analytics", 3)
classname <- c("Data Analytics", "Data Mining",
"Data Visualization")
substr(classname, 1, 4)
countries <- c("Korea, KR", "United States, US",
"China, CN")
str(islands)
head(islands)
landmesses <- names(islands)
landmesses
str(islands)
View(islands)
landmesses
grep(pattern="New", x=landmesses)
index <- grep("New", landmesses)
landmesses[index]
txt <- "Data Analytics is useful. Data Analytics is also interesting."
gsub(pattern="Data", replacement="Business", x=txt)
words <- c("ct", "at", "bat", "chick", "chae", "cat",
"cheanomeles", "chase", "chasse", "mychasse",
"cheap", "check", "cheese", "hat", "mycat", "mycheese")
grep("che", words, value=T) # 포함하는 원소들의 값들로 구성된 벡터 리턴
grep("che", words) # 포함하는 원소들의 인덱스들로 구성된 벡터 리턴
grep("at", words, value=T)
grep("[ch]", words, value=T)
gsub(pattern="Data", replacement="Business", x=txt)
grep("[at]", words, value=T)
grep("[at]", words, value=T)
grep("ch|at", words, value=T)
grep("ch(e|i)ck", words, value=T)
grep("chase", words, value=T)
grep("chas?e", words, value=T)
grep("chas?e", words, value=T)
grep("chas?e", words, value=T)
grep("chas+e", words, value=T)
grep("chas*e", words, value=T)
grep("chas?e", words, value=T)
grep("ch(a*|e*)se", words, value=T)
grep("^c", words, value=T)  #[^....]  -> 부정   ^xxx  -> 시작
grep("t$", words, value=T)  # xxx$  -> 종료
grep("^c.*t$", words, value=T)
grep( "^[^c]+$", words, value=T)
grep("^[^c]+$", words, value=T)
words
words2 <- c("12 Dec", "OK", "http//",
"<TITLE>Time?</TITLE>",
"12345", "Hi there")
grep("[[:alnum:]]", words2, value=TRUE)
grep("[[:alnum:]]", words2, value=TRUE)
grep("[[:alpha:]]", words2, value=TRUE)
grep("[[:alnum:]]", words2, value=TRUE)
grep("[[:digit:]]", words2, value=TRUE)
grep("[[:punct:]]", words2, value=TRUE)
grep("[[:space:]]", words2, value=TRUE)
grep("\\w", words2, value=TRUE)
grep("\\d", words2, value=TRUE)
grep("\\D", words2, value=TRUE)
grep("\\s", words2, value=TRUE)
fox.said <- "What is essential is invisible to the eye"
fox.said
strsplit(x= fox.said, split= " ")
class(strsplit(x= fox.said, split= " "))
strsplit(x= fox.said, split="")
fox.said.words <- unlist(strsplit(fox.said, " "))
fox.said.words
fox.said.words <- strsplit(fox.said, " ")[[1]]
fox.said.words
fox.said.words
fox.said.words[3]
p1 <- "You come at four in the afternoon, than at there I shall begin to the  happy"
p2 <- "One runs the risk of weeping a little, if one lets himself be tamed"
p3 <- "What makes the desert beautiful is that somewhere it hides a well"
(littleprince <- c(p1, p2, p3))
strsplit(littleprince, " ")
strsplit(littleprince, " ")[[3]]
strsplit(littleprince, " ")[[3]][5]
# 날짜와 시간 관련 기능을 지원하는 함수들
(today <- Sys.Date())
str(today)
class(today)
format(today, "%Y년 %m월 %d일")
format(today, "%d일 %B %Y년")
format(today, "%B %b %m")
format(today, "%y")
format(today, "%Y")
format(today, "%B")
format(today, "%b")
format(today, "%a")
weekdays(today)
months(today)
quarters(today)
unclass(today)  # 1970-01-01을 기준으로 얼마나 날짜가 지났지는 지의 값을 가지고 있다.
Sys.Date(); str(Sys.)
as.POSIXlt("2022/05/01")$wday
as.POSIXlt("2022/05/02")$wday
as.Date('2022/1/17') # 잘 인식한다.
as.Date('2022-1-17')
as.Date('2022-01-17')
as.Date('2022년 1월 17일')
as.Date('1/12/2022',format='%m/%d/%Y') # format 은 생략 가능
as.Date('2022년 1월 17일', '%Y년 %m월 %d일')
as.Date('1월 17, 2022',format='%B %d, %Y')
as.Date('110228',format='%d%b%y')
as.Date('110228',format='%y%m%d')
strptime('2022-08-21 14:10:30', "%Y-%m-%d %H:%M:%S")
words <- c("ct", "at", "bat", "chick", "chae", "cat",
"cheanomeles", "chase", "chasse", "mychasse",
"cheap", "check", "cheese", "hat", "mycat", "mycheese")
words2 <- c("12 Dec", "OK", "http//",
"<TITLE>Time?</TITLE>",
"12345", "Hi there")
grep("^[^c]+$", words, value=T)
grep("[^c]+$", words, value=T)
^
grep("^[^c]+$", words, value=T)
words <- c("ct", "at", "bat", "chick", "chae", "cat",
"cheanomeles", "chase", "chasse", "mychasse",
"cheap", "check", "cheese", "hat", "mycat", "mycheese","vc")
grep("^[^c]+$", words, value=T)
grep("^c.*t$", words, value=T)
url <- "http://unico2013.dothome.co.kr/crawling/exercise_bs.html"
text <- read_html(url)
#3
nodes <- html_nodes(text, "img")
url <- "http://unico2013.dothome.co.kr/crawling/exercise_bs.html"
text <- read_html(url)
library(rvest)
library(XML)
library(httr)
url <- "http://unico2013.dothome.co.kr/crawling/exercise_bs.html"
text <- read_html(url)
#3
nodes <- html_nodes(text, "img")
html_attr(nodes,"src")
#5
nodes <- html_nodes(text, "ul li")
html_text(html_node(text,"ul > [style=green]")) #$= 스타일 속성이 green으로 끝나는 것, =만 쓰면 green인 것을 찾아라
$
#5
nodes <- html_nodes(text, "ul>li")
nodes
html_text(html_node(text,"ul > [style$=green]")) #$= 스타일 속성이 green으로 끝나는 것, =만 쓰면 green인 것을 찾아라
html_text(html_node(text,"ul > style$=green")) #$= 스타일 속성이 green으로 끝나는 것, =만 쓰면 green인 것을 찾아라
html_text(html_node(text,"ul > [style$=green]")) #$= 스타일 속성이 green으로 끝나는 것, =만 쓰면 green인 것을 찾아라
# 데이터 전처리(1) - apply 계열의 함수를 알아보자
weight <- c(65.4, 55, 380, 72.2, 51, NA)
height <- c(170, 155, NA, 173, 161, 166)
gender <- c("M", "F","M","M","F","F")
df <- data.frame(w=weight, h=height)
df
apply(df, 1, sum, na.rm=TRUE)
apply(df, 2, sum, na.rm=TRUE)
lapply(df, sum, na.rm=TRUE)
sapply(df, sum, na.rm=TRUE)
source("~/R_exam/day7.R", encoding = 'UTF-8', echo=TRUE)
list_apply$w
list_apply$h
sapply(df, sum, na.rm=TRUE)
s_apply <- sapply(df, sum, na.rm=TRUE)
names(s_apply)
class(s_apply)
tapply(1:6, gender, sum) # rm(sum)
tapply(df$w, gender, mean, na.rm=TRUE)
tapply(1:6, gender, sum) # rm(sum)
tapply(df$w, gender, mean, na.rm=TRUE)
mapply(paste, 1:5, LETTERS[1:5], month.abb[1:5])
mapply(paste, 1:5, LETTERS[1:5], month.abb[1:5])
v<-c("abc", "DEF", "TwT")
sapply(v, function(d) paste("-",d,"-", sep=""))
l<-list("abc", "DEF", "TwT")
sapply(l, function(d) paste("-",d,"-", sep=""))
lapply(l, function(d) paste("-",d,"-", sep=""))
lapply(l, function(d) paste("-",d,"-", sep=""))$1
lapply(l, function(d) paste("-",d,"-", sep=""))$[[1]]
flower <- c("rose", "iris", "sunflower", "anemone", "tulip")
length(flower)
nchar(flower)
sapply(flower, function(d) if(nchar(d) > 5) return(d))
sapply(flower, function(d) if(nchar(d) > 5) d)
sapply(flower, function(d) if(nchar(d) > 5) return(d) else return(NA))
sapply(flower, function(d) if(nchar(d) > 5) return(d))
sapply(flower, function(d) if(nchar(d) > 5) d)
sapply(flower, function(d) if(nchar(d) > 1) return(d))
5
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d))
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d), 3)
help(sapply)
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d), 3)
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d))
sapply(flower, function(d) paste("-",d,"-", sep=""))
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d), n = 3)
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d),5)
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d),1)
count <- 1
myf <- function(x, wt=T){
cat(x,"(",count,")", "\n")
Sys.sleep(1)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
return(r)
}
result <- sapply(df$w, myf) #c(65.4, 55, 380, 72.2, 51, NA)
sapply(df$w, myf, F)
result
count <- 1
sapply(df, myf)
rr1 <- sapply(df$w, myf, wt=F)
myf <- function(x, wt=T){
cat(x,"(",count,")", "\n")
Sys.sleep(1)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
return(r)
}
result <- sapply(df$w, myf) #c(65.4, 55, 380, 72.2, 51, NA)
rr2 <- sapply(df, myf)
rr2
rr2 <- sapply(df, myf)
str(rr2)
rr2
sapply(df$w, myf, F)
# 만일 오류 발생을 무시하고 싶어서 사용하지만 소용없음, 외부 라이브러리 사용 때문이라 추정(^^)
# 없을 수도 있으면 복수형(findElements()) 사용할것
one<-NULL
try(one<-remDr$findElement(using='css selector', 'p'))
library(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome")
# 만일 오류 발생을 무시하고 싶어서 사용하지만 소용없음, 외부 라이브러리 사용 때문이라 추정(^^)
# 없을 수도 있으면 복수형(findElements()) 사용할것
one<-NULL
try(one<-remDr$findElement(using='css selector', 'p'))
print(one)
print(length(one))
url <- "http://unico2013.dothome.co.kr/crawling/exercise_bs.html"
remDr$navigate(url)
remDr$open()
remDr$navigate("http://www.google.com/")
url <- "http://unico2013.dothome.co.kr/crawling/exercise_bs.html"
remDr$navigate(url)
# 수행1
one<-remDr$findElement(using='css selector', 'a:nth-of-type(4)')
one
# 수행2
one$getElementTagName()
# 수행3
one$getElementText()
# 클릭 이벤트 처리하는 또 다른 방법
remDr$executeScript("arguments[0].click()",list(one))
#베스트 댓글 내용 읽어오기
url<-'http://comic.naver.com/comment/comment.nhn?titleId=570503&no=135'
remDr$navigate(url)
bestReviewNodes<-remDr$findElements(using ="css selector","ul.u_cbox_list span.u_cbox_contents")
sapply(bestReviewNodes,function(x){ x$getElementText() })
one$getElementAttribute("style")
one$getElementAttribute("style")
# 다음에 제시된  URL의 웹 페이지는 정적 방법으로 충분히 가능하지만
# 이해를 돕기 위해 간단한 웹페이지를 크롤링하고 스크래핑 함
url <- "http://unico2013.dothome.co.kr/crawling/tagstyle.html"
remDr$navigate(url)
library(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome")
remDr$open()
# 다음에 제시된  URL의 웹 페이지는 정적 방법으로 충분히 가능하지만
# 이해를 돕기 위해 간단한 웹페이지를 크롤링하고 스크래핑 함
url <- "http://unico2013.dothome.co.kr/crawling/tagstyle.html"
remDr$navigate(url)
one$getElementAttribute("style")
one$getElementAttribute("style")
(one$getElementAttribute("style"))
one$getElementTagName()
library(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome")
remDr$open()
remDr$navigate("http://www.google.com/")
class(remDr)
str(remDr)
webElem <- remDr$findElement(using = "css selector", "#query")
webElem$sendKeysToElement(list("PYTHON", key = "enter"))
newv2
# 동적 웹 페이지의 수집
install.packages("RSelenium")
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome")
remDr$open()
remDr$navigate("http://www.google.com/")
class(remDr)
str(remDr)
webElem <- remDr$findElement(using = "css", "[name = 'q']")
webElem$sendKeysToElement(list("PYTHON", key = "enter"))
remDr$navigate("http://www.naver.com/")
webElem <- remDr$findElement(using = "css selector", "#query")
webElem$sendKeysToElement(list("PYTHON", key = "enter"))
str(webElem)
# 다음에 제시된  URL의 웹 페이지는 정적 방법으로 충분히 가능하지만
# 이해를 돕기 위해 간단한 웹페이지를 크롤링하고 스크래핑 함
url <- "http://unico2013.dothome.co.kr/crawling/tagstyle.html"
remDr$navigate(url)
#단수형으로 노드 추출 using=css selector
one<-remDr$findElement(using='css selector', 'div') # 노드 한 개 리턴(WebElement 객체)
one$getElementTagName()
one$getElementText()
one$getElementAttribute("style")
url<-'http://comic.naver.com/comment/comment.nhn?titleId=570503&no=135'
remDr$navigate(url)
# 링크 클릭시 AJAX 로 처리되는 네이버 웹툰 댓글 읽어 오기
repl_v = NULL;
#베스트 댓글 내용 읽어오기
doms1<-remDr$findElements(using ="css selector","ul.u_cbox_list span.u_cbox_contents")
vest_repl <- sapply(doms1,function(x){x$getElementText()})
repl_v <- c(repl_v, unlist(vest_repl))
toralReview <- remDr$findElement(using='css selector','span.u_cbox_in_view_comment')
toralReview$clickElement()
#전체 댓글의 첫 페이지 내용 읽어오기
doms2<-remDr$findElements(using ="css selector","ul.u_cbox_list span.u_cbox_contents")
repl <-sapply(doms2,function(x){x$getElementText()})
repl_v <- c(repl_v, unlist(repl))
repeat {
for (i in 4:12) {
nextCss <- paste("#cbox_module>div>div.u_cbox_paginate>div> a:nth-child(",i,") > span", sep="")
try(nextListLink<-remDr$findElement(using='css selector',nextCss))
if(length(nextListLink) == 0)   break;
nextListLink$clickElement()
Sys.sleep(1)
#전체 댓글의 해당 페이지 내용 읽어오기
doms3<-remDr$findElements(using ="css selector","ul.u_cbox_list span.u_cbox_contents")
repl <-sapply(doms3,function(x){x$getElementText()})
repl_v <- c(repl_v, unlist(repl))
}
try(nextPage<-remDr$findElement(using='css selector',
"#cbox_module > div > div.u_cbox_paginate > div > a:nth-child(13) > span.u_cbox_cnt_page"))
if(length(nextPage) == 0)  break;
nextPage$clickElement()
Sys.sleep(1)
doms2<-remDr$findElements(using ="css selector","ul.u_cbox_list span.u_cbox_contents")
repl <-sapply(doms2,function(x){x$getElementText()})
repl_v <- c(repl_v, unlist(repl))
}
favorite <- c('WINTER', 'SUMMER', 'SPRING', 'SUMMER', 'SUMMER',
'FALL', 'FALL', 'SUMMER', 'SPRING', 'SPRING')   # 자료 입력
favorite                            # favorite의 내용 출력
table(favorite)                     # 도수분포 계산
ds <- table(favorite)                      # 도수분포표 저장
ds
# 도수분포표 내용 확인
barplot(ds, main='favorite season')        # 막대그래프 작성
barplot(ds, main='favorite season',
col='yellow',                          # 막대의 색을 지정
names=c('FA','SP','SU','WI'))          # 그룹 이름을 바꾸어 출력
barplot(ds, main='favorite season',
col='green',                          # 막대의 색을 지정
las=2)                                # 그룹 이름을 수직 방향으로
par(mfrow=c(1, 1), mar=c(5, 5, 5, 7))
barplot(ds, main='인구 추정',
col=c('green','blue','yellow'),
beside=TRUE,
legend.text=T,
args.legend = list(x='topright', bty='n', inset=c(-0.25,0)))
head(cars)
dist <- cars[,2]              # 자동차 제동거리
dist
hist(dist,                    # data
main='Histogram for 제동거리',   # 제목
xlab ='제동거리',        # x축 레이블
ylab='빈도수',           # y축 레이블
border='blue',           # 막대 테두리색
col='green',             # 막대 색
las=2,                   # x축 글씨 방향(0~3)
breaks=5)                # 막대 개수 조절
install.packages('reshape2')
library(reshape2)
str(tips)
head(tips)
tips.new$perHead <- tips.new$total_bill / tips.new$size
tips.new <- tips
tips.new$perHead <- tips.new$total_bill / tips.new$size
tips.new
dinner <- subset(tips.new,time==Dinner)
dinner <- subset(tips.new,time=='Dinner')
dinner
per_dinner <- hist(dinner,
main='1인당 주문 금액(디너)')
per_dinner <- hist(dinner$perHead,
main='1인당 주문 금액(디너)')
par(mfrom=c(1,3))
par(mfrow=c(1,3))
per_dinner <- hist(dinner$perHead,
main='1인당 주문 금액(디너)')
lunch <- subset(tips.new,time=='Lunch')
lunch
per_lunch <- hist(lunch$perHead,
main='1인당 주문 금액(런치)')
hist(tips.new$perHead,main = '1인당 주문 금액(전체)')
install.packages('DAAG')
library(DAAG)
str(science)
View(science)
ds <- table(science)
ds
ds <- table(science$like)
ds
pie(ds, main='선호도')
par(mfrow=c(1,1))
pie(ds, main='선호도')
pie(ds, main='선호도'
col=rainbow(8))
pie(ds, main='선호도',
col=rainbow(8))
ds <- table(science$State)
ds <- table(science$State)
pie(ds, main='주별 학생 비율',col=rainbow(8))
par(mfrow=c(1,3))
pie(ds, main='선호도',col=rainbow(8))
ds <- table(science$like)
pie(ds, main='선호도',col=rainbow(8))
str(LakeHuron)
View(LakeHuron)
ds <- data.frame(year,LakeHuron)
year <- 1875:1972
ds <- data.frame(year,LakeHuron)
ds
plot(ds,main='호수 수위 변화')
par(mfrow=c(1,1))
plot(ds,main='호수 수위 변화',type='b',lyt=1)
plot(ds,main='호수 수위 변화',type='b',lty=1)
plot(ds,main='호수 수위 변화',type='l',lty=1)
print('test')
getwd()
setwd('C:\Users\Jo\PYDATAexam\IIC_project')
setwd(r'C:\Users\Jo\PYDATAexam\IIC_project')
setwd('C:/Users/Jo/PYDATAexam/IIC_project')
df <- read.csv('test.csv')
df <- read.csv('test.csv',header=T)
df <- read.table('test.csv',header=T)
df <- read.csv('test.csv',header=T)
df <- read.csv('test.csv',header=False)
df <- read.csv('test.csv',header=F)
df <- read.csv('test.csv',header=F)
df
df <- read.csv('test.csv',header=T)
df
type(df)
type df
fit = lm(주차면수~자동차.등록수+교통안전지수+장애인수)
fit = lm(formula = 주차면수~자동차.등록수+교통안전지수+장애인수,data=df)
summary(fit)
par(mfrow=c(2,2))
plot(fit)
shapiro.test(fit$residuals)
